//
//  capture.swift
//  GithubApp
//
//  Created by 鈴木 健太 on 2025/04/12.
//

// https://github.com/mixi-inc/iOSTraining/blob/master/Swift/pages/day3/1-1_Closure.md

/*
キャプチャとは？
キャプチャとは、クロージャが変数や定数を「コピーして保持する」ことを指します。これによって、クロージャ内でその変数の値が保持されるようになります。

🧠 ざっくり説明
クロージャは、外部の変数や定数を使って処理を行うことができるけど、その時に変数の値が「キャプチャ」される。

キャプチャされると、クロージャ内でその変数の「値が固定される」んじゃなくて、変数自体がコピーされてクロージャ内で使われる。

🔍 最初の例の流れ（キャプチャしない場合）
var a: Int = 10

let c1 = {
    print("a = \(a)")
}
c1() // a = 10 と表示

a = 20
c1() // a = 20 と表示
ポイント：
この場合、クロージャ c1 は変数 a をキャプチャしていないので、a の値が変更されると、その変化をクロージャ内でリアルタイムに反映します。

クロージャは「参照（参照型）」なので、a の値が変わると、それを参照しているクロージャ内でもその変化が反映される。

🔍 次の例（キャプチャする場合）
var a: Int = 10

let c1 = { [a] in
    print("a = \(a)")
}
c1() // a = 10 と表示

a = 20
c1() // a = 10 と表示
ポイント：
この場合、クロージャ c1 は [a] という キャプチャリスト を使って、a の値をクロージャ内にキャプチャしています。

キャプチャリストの中に [a] と書くことで、クロージャは**a の値をその時点でコピーして保持**します。

そのため、a の値が変更されても、クロージャ内で表示されるのは**最初にキャプチャした a の値（10）**になります。

🧩 キャプチャリストとは？
キャプチャリストは、クロージャ内で外部変数や定数をどのようにキャプチャするかを指定する方法です。

書き方：
[変数名] : 変数の値をコピーしてキャプチャ

[weak 変数名] : 変数を弱参照してキャプチャ（循環参照を防ぐ）

[unowned 変数名] : 変数を非所有参照してキャプチャ（こちらも循環参照防止）

例：
var a = 10
var b = 20

let c1 = { [a, b] in
    print("a = \(a), b = \(b)")
}

a = 30
b = 40

c1() // a = 10, b = 20 と表示
ここでは、a と b がキャプチャリストでキャプチャされているので、a = 10, b = 20 と表示されます。つまり、クロージャ内で参照される値はキャプチャされた時点の値になります。

🐵 まとめ
キャプチャは、クロージャが外部変数を「コピーして」保持すること。

キャプチャリストで [変数名] と書くと、その変数の値をコピーしてクロージャ内に保持する。

キャプチャしない場合は、変数が変更されるとクロージャ内でもその変化が反映される。
*/
